import 'package:flutter/material.dart';
import '../models/doctor.dart';
import '../services/admin_service.dart';
import '../widgets/sidebar.dart';

class AddDoctorScreen extends StatefulWidget {
  final Doctor? doctor; // For editing existing doctor

  const AddDoctorScreen({Key? key, this.doctor}) : super(key: key);

  @override
  State<AddDoctorScreen> createState() => _AddDoctorScreenState();
}

class _AddDoctorScreenState extends State<AddDoctorScreen> {
  final _formKey = GlobalKey<FormState>();
  final AdminService _adminService = AdminService();

  late TextEditingController _nameController;
  late TextEditingController _emailController;
  late TextEditingController _phoneController;
  late TextEditingController _experienceController;
  late TextEditingController _degreeController;
  late TextEditingController _consultationFeeController;
  late TextEditingController _aboutController;

  String _selectedSpeciality = 'Cardiology';
  List<String> _selectedWorkingDays = [];
  String _workingHours = '9:00 AM - 5:00 PM';
  bool _isAvailable = true;
  bool _isLoading = false;

  final List<String> _specialities = [
    'Cardiology',
    'Neurology',
    'Pediatrics',
    'Orthopedics',
    'Dermatology',
    'General Medicine',
    'Emergency Medicine',
    'Psychiatry',
    'Oncology',
    'Gynecology',
  ];

  final List<String> _departments = [
    'Cardiology',
    'Neurology',
    'Pediatrics',
    'Orthopedics',
    'Dermatology',
    'General Medicine',
    'Emergency Medicine',
    'Psychiatry',
    'Oncology',
    'Gynecology',
  ];

  final List<String> _weekDays = [
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
    'Sunday',
  ];

  final List<String> _timeSlots = [
    '8:00 AM - 4:00 PM',
    '9:00 AM - 5:00 PM',
    '10:00 AM - 6:00 PM',
    '11:00 AM - 7:00 PM',
    '2:00 PM - 10:00 PM',
    '6:00 PM - 2:00 AM',
  ];

  @override
  void initState() {
    super.initState();
    _initializeControllers();
  }

  void _initializeControllers() {
    if (widget.doctor != null) {
      // Editing existing doctor
      final doctor = widget.doctor!;
      _nameController = TextEditingController(text: doctor.name);
      _emailController = TextEditingController(text: doctor.email);
      _phoneController = TextEditingController(text: doctor.phone);
      _experienceController = TextEditingController(text: doctor.experience);
      _degreeController = TextEditingController(text: doctor.degree);
      _consultationFeeController =
          TextEditingController(text: doctor.consultationFee);
      _aboutController = TextEditingController(text: doctor.about);

      _selectedSpecialization = doctor.specialization;
      _selectedDepartment = doctor.department;
      _selectedWorkingDays = List.from(doctor.workingDays);
      _workingHours = doctor.workingHours;
      _isAvailable = doctor.isAvailable;
    } else {
      // Adding new doctor
      _nameController = TextEditingController();
      _emailController = TextEditingController();
      _phoneController = TextEditingController();
      _experienceController = TextEditingController();
      _degreeController = TextEditingController();
      _consultationFeeController = TextEditingController(text: '500');
      _aboutController = TextEditingController();

      _selectedWorkingDays = [
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday'
      ];
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    _experienceController.dispose();
    _degreeController.dispose();
    _consultationFeeController.dispose();
    _aboutController.dispose();
    super.dispose();
  }

  Future<void> _saveDoctor() async {
    if (!_formKey.currentState!.validate()) return;

    if (_selectedWorkingDays.isEmpty) {
      _showErrorSnackBar('Please select at least one working day');
      return;
    }

    setState(() => _isLoading = true);

    try {
      final doctor = Doctor(
        id: widget.doctor?.id ?? '',
        name: _nameController.text.trim(),
        email: _emailController.text.trim(),
        phone: _phoneController.text.trim(),
        specialization: _selectedSpecialization,
        department: _selectedDepartment,
        experience: _experienceController.text.trim(),
        degree: _degreeController.text.trim(),
        workingDays: _selectedWorkingDays,
        workingHours: _workingHours,
        consultationFee: _consultationFeeController.text.trim(),
        about: _aboutController.text.trim(),
        isAvailable: _isAvailable,
        joinDate: widget.doctor?.joinDate ?? DateTime.now(),
        rating: widget.doctor?.rating ?? 0.0,
        totalPatients: widget.doctor?.totalPatients ?? 0,
      );

      bool success;
      if (widget.doctor != null) {
        // Update existing doctor
        success = await _adminService.updateDoctor(widget.doctor!.id, doctor);
        if (success) {
          _showSuccessSnackBar('Doctor updated successfully');
          Navigator.pop(context, true);
        } else {
          _showErrorSnackBar('Failed to update doctor');
        }
      } else {
        // Create new doctor with credentials
        final password = _generatePassword(); // Generate random password
        final result =
            await _adminService.createDoctorWithCredentials(doctor, password);

        if (result != null) {
          _showDoctorCredentials(result);
        } else {
          _showErrorSnackBar('Failed to add doctor');
        }
      }
    } catch (e) {
      _showErrorSnackBar('An error occurred: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  String _generatePassword() {
    // Generate a simple password: FirstName + random 4 digits
    final firstName =
        _nameController.text.trim().split(' ').first.toLowerCase();
    final random = (1000 + (DateTime.now().millisecondsSinceEpoch % 9000));
    return '$firstName$random';
  }

  void _showDoctorCredentials(Map<String, dynamic> result) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            const Icon(Icons.check_circle, color: Colors.green, size: 28),
            const SizedBox(width: 12),
            const Text('Doctor Created Successfully!'),
          ],
        ),
        content: Container(
          width: 400,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'The doctor has been added to the system. Here are their login credentials:',
                style: TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 20),
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey[300]!),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Login Credentials:',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                        color: Colors.indigo,
                      ),
                    ),
                    const SizedBox(height: 12),
                    _buildCredentialRow('Doctor ID:', result['doctorId'] ?? ''),
                    _buildCredentialRow('Email:', result['email'] ?? ''),
                    _buildCredentialRow('Password:', result['password'] ?? ''),
                    const SizedBox(height: 12),
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.amber[50],
                        borderRadius: BorderRadius.circular(4),
                        border: Border.all(color: Colors.amber[300]!),
                      ),
                      child: const Row(
                        children: [
                          Icon(Icons.warning, color: Colors.amber, size: 16),
                          SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              'Please share these credentials securely with the doctor.',
                              style:
                                  TextStyle(fontSize: 12, color: Colors.amber),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => _copyCredentials(result),
            child: const Text('Copy Credentials'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context); // Close dialog
              Navigator.pop(context, true); // Go back to doctor list
            },
            child: const Text('Done'),
          ),
        ],
      ),
    );
  }

  Widget _buildCredentialRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 80,
            child: Text(
              label,
              style: const TextStyle(fontWeight: FontWeight.w600),
            ),
          ),
          Expanded(
            child: SelectableText(
              value,
              style: const TextStyle(fontFamily: 'monospace'),
            ),
          ),
        ],
      ),
    );
  }

  void _copyCredentials(Map<String, dynamic> result) {
    final credentials = '''
Doctor Login Credentials:
Doctor ID: ${result['doctorId'] ?? ''}
Email: ${result['email'] ?? ''}
Password: ${result['password'] ?? ''}

Please keep these credentials secure.
''';

    // In a real app, you would copy to clipboard using Clipboard.setData
    // For now, we'll just show success message
    print('Credentials to copy: $credentials'); // For debugging
    _showSuccessSnackBar('Credentials ready to copy');
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0A0E27),
      body: Row(
        children: [
          const AdminSidebar(),
          Expanded(
            child: Column(
              children: [
                _buildHeader(),
                Expanded(
                  child: SingleChildScrollView(
                    padding: const EdgeInsets.all(24),
                    child: _buildForm(),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: const BoxDecoration(
        color: Color(0xFF1A1D29),
        border: Border(
          bottom: BorderSide(color: Color(0xFF2A2D3F), width: 1),
        ),
      ),
      child: Row(
        children: [
          IconButton(
            onPressed: () => Navigator.pop(context),
            icon: const Icon(Icons.arrow_back, color: Colors.white),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  widget.doctor != null ? 'Edit Doctor' : 'Add New Doctor',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  widget.doctor != null
                      ? 'Update doctor information and settings'
                      : 'Fill in the details to add a new doctor',
                  style: TextStyle(
                    color: Colors.grey[400],
                    fontSize: 16,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildForm() {
    return Form(
      key: _formKey,
      child: Container(
        padding: const EdgeInsets.all(32),
        decoration: BoxDecoration(
          color: const Color(0xFF1A1D29),
          borderRadius: BorderRadius.circular(16),
          border: Border.all(color: const Color(0xFF2A2D3F)),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Basic Information Section
            _buildSectionTitle('Basic Information'),
            const SizedBox(height: 24),
            Row(
              children: [
                Expanded(child: _buildTextField('Full Name', _nameController)),
                const SizedBox(width: 16),
                Expanded(
                    child: _buildTextField('Email', _emailController,
                        isEmail: true)),
              ],
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(child: _buildTextField('Phone', _phoneController)),
                const SizedBox(width: 16),
                Expanded(
                    child:
                        _buildTextField('Experience', _experienceController)),
              ],
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                    child: _buildDropdown('Specialization',
                        _selectedSpecialization, _specializations, (value) {
                  setState(() => _selectedSpecialization = value!);
                })),
                const SizedBox(width: 16),
                Expanded(
                    child: _buildDropdown(
                        'Department', _selectedDepartment, _departments,
                        (value) {
                  setState(() => _selectedDepartment = value!);
                })),
              ],
            ),
            const SizedBox(height: 16),
            _buildTextField('Degree/Qualification', _degreeController),

            const SizedBox(height: 32),

            // Schedule Section
            _buildSectionTitle('Schedule & Availability'),
            const SizedBox(height: 24),
            _buildWorkingDaysSelector(),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                    child: _buildDropdown(
                        'Working Hours', _workingHours, _timeSlots, (value) {
                  setState(() => _workingHours = value!);
                })),
                const SizedBox(width: 16),
                Expanded(
                    child: _buildTextField(
                        'Consultation Fee (₹)', _consultationFeeController,
                        isNumber: true)),
              ],
            ),

            const SizedBox(height: 32),

            // Additional Information Section
            _buildSectionTitle('Additional Information'),
            const SizedBox(height: 24),
            _buildTextField('About Doctor', _aboutController, maxLines: 4),
            const SizedBox(height: 16),
            _buildAvailabilitySwitch(),

            const SizedBox(height: 32),

            // Action Buttons
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: () => Navigator.pop(context),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.grey[600],
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: const Text('Cancel'),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: ElevatedButton(
                    onPressed: _isLoading ? null : _saveDoctor,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFFFF6B9D),
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: _isLoading
                        ? const SizedBox(
                            height: 20,
                            width: 20,
                            child: CircularProgressIndicator(
                              strokeWidth: 2,
                              color: Colors.white,
                            ),
                          )
                        : Text(widget.doctor != null
                            ? 'Update Doctor'
                            : 'Add Doctor'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: const TextStyle(
        color: Colors.white,
        fontSize: 20,
        fontWeight: FontWeight.bold,
      ),
    );
  }

  Widget _buildTextField(
    String label,
    TextEditingController controller, {
    bool isEmail = false,
    bool isNumber = false,
    int maxLines = 1,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style:
              const TextStyle(color: Colors.white, fontWeight: FontWeight.w500),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: controller,
          maxLines: maxLines,
          keyboardType: isEmail
              ? TextInputType.emailAddress
              : isNumber
                  ? TextInputType.number
                  : TextInputType.text,
          style: const TextStyle(color: Colors.white),
          decoration: InputDecoration(
            filled: true,
            fillColor: const Color(0xFF2A2D3F),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide.none,
            ),
            hintStyle: TextStyle(color: Colors.grey[400]),
          ),
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return '$label is required';
            }
            if (isEmail &&
                !RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
              return 'Please enter a valid email';
            }
            return null;
          },
        ),
      ],
    );
  }

  Widget _buildDropdown(String label, String value, List<String> options,
      Function(String?) onChanged) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style:
              const TextStyle(color: Colors.white, fontWeight: FontWeight.w500),
        ),
        const SizedBox(height: 8),
        DropdownButtonFormField<String>(
          value: value,
          onChanged: onChanged,
          style: const TextStyle(color: Colors.white),
          dropdownColor: const Color(0xFF2A2D3F),
          decoration: InputDecoration(
            filled: true,
            fillColor: const Color(0xFF2A2D3F),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide.none,
            ),
          ),
          items: options.map((option) {
            return DropdownMenuItem(
              value: option,
              child: Text(option),
            );
          }).toList(),
        ),
      ],
    );
  }

  Widget _buildWorkingDaysSelector() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Working Days',
          style: TextStyle(color: Colors.white, fontWeight: FontWeight.w500),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: _weekDays.map((day) {
            final isSelected = _selectedWorkingDays.contains(day);
            return FilterChip(
              label: Text(day),
              selected: isSelected,
              onSelected: (selected) {
                setState(() {
                  if (selected) {
                    _selectedWorkingDays.add(day);
                  } else {
                    _selectedWorkingDays.remove(day);
                  }
                });
              },
              selectedColor: const Color(0xFFFF6B9D),
              backgroundColor: const Color(0xFF2A2D3F),
              labelStyle: TextStyle(
                color: isSelected ? Colors.white : Colors.grey[400],
              ),
            );
          }).toList(),
        ),
      ],
    );
  }

  Widget _buildAvailabilitySwitch() {
    return Row(
      children: [
        const Text(
          'Available for Consultation',
          style: TextStyle(color: Colors.white, fontWeight: FontWeight.w500),
        ),
        const Spacer(),
        Switch(
          value: _isAvailable,
          onChanged: (value) => setState(() => _isAvailable = value),
          activeColor: const Color(0xFFFF6B9D),
        ),
      ],
    );
  }
}
